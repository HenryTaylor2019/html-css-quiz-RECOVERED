{"version":3,"sources":["contexts/QuizContext.js","components/Header.js","components/Footer.js","components/Quiz.js","components/Score.js","ComponentManager.js","App.js","serviceWorker.js","index.js"],"names":["QuizContext","createContext","QuizContextProvider","state","quizData","question","correct","wrongOne","wrongTwo","score","incorrect","questionNumber","handleCorrect","e","nextQuestion","setState","handleIncorrect","preventDefault","handleReset","Provider","value","this","props","children","Component","Header","className","Footer","context","onClick","contextType","Quiz","object","currentQuestion","Score","ComponentManager","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f5296605.chunk.js","sourcesContent":["import React, { createContext, Component } from 'react';\n\nexport const QuizContext = createContext();\n\nclass QuizContextProvider extends Component {\n    state = {\n        quizData: \n        [\n            {\n                question: 'What does CSS stand for?',\n                correct: 'Cascading Style sheets',\n                wrongOne: 'Computer Style sheets',\n                wrongTwo: 'Cascading Syntax sheets'\n            },\n            {\n                question: 'Where in an HTML document is the correct place to refer to an external style sheet?',\n                correct: 'In the <head> section',\n                wrongOne: 'In the <body> section',\n                wrongTwo: 'At the Bottom of the page'\n            },\n            {\n                question: 'Which HTML tag is used to define an internal style sheet?',\n                correct: '<style>',\n                wrongOne: '<link>',\n                wrongTwo: '<css>'\n            },\n            {\n                question: 'What is the correct HTML element for inserting a line break?',\n                correct: '<br>',\n                wrongOne: '<break>',\n                wrongTwo: '<ul>'\n            },\n            {\n                question: 'Which HTML attribute specifies an alternate text for an image, if the image cannot be displayed?',\n                correct: 'alt',\n                wrongOne: 'title',\n                wrongTwo: 'href'\n            },\n            {\n                question: 'Which of the following properties is used to change the face of a font?',\n                correct: 'font-family',\n                wrongOne: 'font-style',\n                wrongTwo: 'font-type'\n            },\n            {\n                question: 'Which of these refers to an element by class?',\n                correct: '.class',\n                wrongOne: '#class',\n                wrongTwo: '_class'\n            },\n            {\n                question: 'Which of the following refers to the space around an html element?',\n                correct: 'margin',\n                wrongOne: 'padding',\n                wrongTwo: 'border'\n            },\n            {\n                question: 'How do you add a comment in a CSS file?',\n                correct: '/* this is a comment */',\n                wrongOne: '<--! this is a comment -->',\n                wrongTwo: '// this is a comment //'\n            },\n            {\n                question: 'Which of these is used to change the text color of an element?',\n                correct: 'color:',\n                wrongOne: 'font-color:',\n                wrongTwo: 'text-color:'\n            },\n        ],\n        score: 0,\n        incorrect: null,\n        questionNumber: 0,\n    }\n\n    handleCorrect = (e) => {\n        let correct = this.state.score + 1;\n        let nextQuestion = this.state.questionNumber + 1;\n        \n        this.setState({\n            score: correct,\n            questionNumber: this.state.questionNumber < 10 ? nextQuestion : 0,\n            incorrect: this.state.questionNumber < 10 ? nextQuestion : 0,\n        });\n    }\n\n    handleIncorrect = (e) => {\n        let incorrect = this.state.incorrect + 1;\n        let nextQuestion = this.state.questionNumber + 1;\n\n        this.setState({\n            incorrect: incorrect,\n            questionNumber: this.state.questionNumber < 10 ? nextQuestion : 0,\n        });\n        e.preventDefault();\n    }\n\n    handleReset = (e) => {\n    \n        this.setState({\n            score: null,\n            incorrect: null,\n            questionNumber: 0,\n        });\n        e.preventDefault();\n    }\n\n    render() {\n\n        return (\n            <QuizContext.Provider value={{\n                ...this.state,\n                handleCorrect: this.handleCorrect,\n                handleIncorrect: this.handleIncorrect,\n                handleReset: this.handleReset,\n            }}>\n\n                {this.props.children}\n            </QuizContext.Provider>\n        );\n    }\n}\n\nexport default QuizContextProvider;","import React from 'react';\n\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            <h1>Quiz App</h1>\n\n            \n        </div>\n    )\n}\n\nexport default Header","import React, { Component } from 'react';\nimport { QuizContext } from '../contexts/QuizContext';\n\nclass Footer extends Component {\n    static contextType = QuizContext;\n\n\n    render() {\n        const { handleReset } = this.context;\n\n\n        return (\n            <div className=\"footer\">\n                <div className=\"reset\">\n                    <button onClick={handleReset}>Reset</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport { QuizContext } from '../contexts/QuizContext';\n\nclass Quiz extends Component {\n    static contextType = QuizContext;\n\n    render() {\n        const { quizData, handleCorrect, handleIncorrect, questionNumber } = this.context;\n\n        let object = quizData[questionNumber];\n\n        let question = object.question;\n        let correct = object.correct;\n        let wrongOne = object.wrongOne;\n        let wrongTwo = object.wrongTwo;\n        // let currentScore = questionNumber !== 0 ? score : 0;\n        let currentQuestion = questionNumber + 1;\n\n        return (\n            <div className=\"main\">\n\n                <section className=\"question-section\">\n                    <h2>{question}</h2>\n                </section>\n\n\n\n                {/* Consider changing whole page to blue */}\n\n                {/* Conditional to swap answers around - more elegant solution needed */}\n                {questionNumber % 2 === 0 && questionNumber < 5 ?\n                    <div className=\"section\">\n                        <h3 onClick={handleIncorrect}>a) {wrongOne}</h3>\n                        <h3 onClick={handleCorrect}>b) {correct}</h3>\n                        <h3 onClick={handleIncorrect}>c) {wrongTwo}</h3>\n                    </div>\n                    : questionNumber % 3 === 0 && questionNumber < 5 ?\n                        <div className=\"section\">\n                            <h3 onClick={handleCorrect}>{correct}</h3>\n                            <h3 onClick={handleIncorrect}>{wrongOne}</h3>\n                            <h3 onClick={handleIncorrect}>{wrongTwo}</h3>\n                        </div>\n                        :\n                        <div className=\"section\">\n                            <h3 onClick={handleIncorrect}>{wrongOne}</h3>\n                            <h3 onClick={handleIncorrect}>{wrongTwo}</h3>\n                            <h3 onClick={handleCorrect}>{correct}</h3>\n                        </div>\n                }\n\n                <div className=\"counter\">\n                    <h3>Question {currentQuestion} of 10</h3>\n                </div>\n\n\n\n            </div>\n        )\n    }\n}\n\nexport default Quiz;","import React, { Component } from 'react';\nimport { QuizContext } from '../contexts/QuizContext';\n\nclass Score extends Component {\n    static contextType = QuizContext;\n\n    render() {\n        const { score } = this.context;\n\n\n        return (\n            <div className=\"score-page\">\n                <h2 className=\"final-score\">You scored {score} out of 10</h2> \n            </div>\n        )\n    }\n}\n\nexport default Score;","import React, { Component } from 'react';\nimport './App.css';\nimport { QuizContext } from '../src/contexts/QuizContext';\n\nimport Quiz from \"./components/Quiz\";\nimport Score from \"./components/Score\";\n\n\nclass ComponentManager extends Component {\n  static contextType = QuizContext;\n\n  render() {\n    const { questionNumber } = this.context;\n\n    return (\n      <div>\n\n        {questionNumber < 10 ? <Quiz /> : <Score />}\n\n      </div>\n    );\n  }\n}\n\nexport default ComponentManager;\n","import React, { Component } from 'react';\nimport './App.css';\n\n\nimport QuizContextProvidor from './contexts/QuizContext';\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\nimport ComponentManager from \"./ComponentManager\";\n\n\nclass App extends Component {\n\n\n  render() {\n\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <QuizContextProvidor>\n          <ComponentManager />\n          <Footer />\n        </QuizContextProvidor>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}